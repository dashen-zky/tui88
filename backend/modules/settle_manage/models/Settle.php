<?php
/**
 * Created by PhpStorm.
 * User: king
 * Date: 17-4-18
 * Time: 下午5:41
 */

namespace backend\modules\settle_manage\models;

use phpDocumentor\Reflection\Types\Self_;
use Yii;
use common\models\BaseRecord;


class Settle extends  BaseRecord
{
    public $pageSize = 20;

    const WaitRevenueDefaultValue = 0;
    const CheckOrderSuccessToDis = "check_order_success_to_dis";
    const SettlingIndexScenario = "settling_index";
    const SettledIndexScenario = "settled_index";

    public static $my_scenario;
    public $selector = [
        "distributor_executor_map" => [
            "id",
            "executor_uuid",
            "wait_revenue",
            "wait_order_number",
            "total_settlement",
            "total_settle_order_number",
            "recent_settle_time",
        ],
        "frontend_user" => [
            "phone",
        ],
    ];

    public $settling_selector = [
        "distributor_executor_map" => [
            "id",
            "executor_uuid",
            "wait_revenue",
            "wait_order_number",
            "total_settlement",
            "total_settle_order_number",
            "recent_settle_time",
        ],
        "frontend_user" => [
            "phone",
        ],
    ];

    public $settled_selector = [
        "distributor_executor_map" => [
            "id as dis_id",
            "total_settlement",
            "total_settle_order_number",
        ],
        "frontend_user" => [
            "phone",
        ],
        "finance_record" => [
            "id as finance_id",
            "create_time",
            "number_of_order",
            "money",
            "ser_number",
            "paid_status",
        ],
    ];

    const alias = [
        "default" => [
            "distributor_executor_map" => "t1",
            "frontend_user" =>"t2",
            "finance_record" =>"t3",
            "order_finance_map" => "t4",
        ],
    ];

    const RecentSettleTimeAsc = 1;
    const RecentSettleTimeDesc = 9;
    const WaitRevenueAsc = 2;
    const WaitRevenueDesc = 8;
    const CreateTimeDesc = 127;

    const OrderBy = [
        self::RecentSettleTimeAsc => [
            self::alias["default"]["distributor_executor_map"].'.recent_settle_time'=>SORT_ASC,
        ],
        self::RecentSettleTimeDesc => [
            self::alias["default"]["distributor_executor_map"].'.recent_settle_time'=>SORT_DESC,
        ],
        self::WaitRevenueAsc => [
            self::alias["default"]["distributor_executor_map"].'.wait_revenue'=>SORT_ASC,
        ],
        self::WaitRevenueDesc => [
            self::alias["default"]["distributor_executor_map"].'.wait_revenue'=>SORT_DESC,
        ],
        self::CreateTimeDesc => [
            self::alias["default"]["finance_record"].'.create_time'=>SORT_DESC,
        ],
    ];

    public static function tableName()
    {
        return self::DistributorExecutorMap;
    }
    public function scenarios()
    {
        return array_merge(parent::scenarios(),[
            self::CheckOrderSuccessToDis => [self::CheckOrderSuccessToDis],
            self::SettlingIndexScenario => [self::SettlingIndexScenario],
            self::SettledIndexScenario => [self::SettledIndexScenario],
        ]); // TODO: Change the autogenerated stub
    }

    public function buildRecordListRules()
    {
        return [
            self::SettledIndexScenario =>[
                'rules'=>[
                    'distributor_executor_map'=>[
                        'alias'=>'t1',
                        'table_name'=>self::DistributorExecutorMap,
                        'join_condition'=>false,
                        'select_build_way'=>0,
                    ],
                    "frontend_user" => [
                        'alias'=>'t2',
                        'table_name'=>self::USERACCOUNT,
                        'join_condition'=>"t1.executor_uuid = t2.uuid",
                        'select_build_way'=>0,
                    ],
                    "finance_record" => [
                        'alias'=>'t3',
                        'table_name'=>self::Finance_Record,
                        'join_condition'=>"t1.distributor_uuid = t3.create_uuid and t1.executor_uuid = t3.received_uuid",
                        'select_build_way'=>0,
                    ],
                ],
            ],
            self::SettlingIndexScenario =>[
                'rules'=>[
                    'distributor_executor_map'=>[
                        'alias'=>'t1',
                        'table_name'=>self::DistributorExecutorMap,
                        'join_condition'=>false,
                        'select_build_way'=>0,
                    ],
                    "frontend_user" => [
                        'alias'=>'t2',
                        'table_name'=>self::USERACCOUNT,
                        'join_condition'=>"t1.executor_uuid = t2.uuid",
                        'select_build_way'=>0,
                    ],
                ],
            ],
            "settled_detail" =>[
                'rules'=>[
                    "finance_record" => [
                        'alias'=>'t3',
                        'table_name'=>self::Finance_Record,
                        'join_condition'=>false,
                        'select_build_way'=>0,
                    ],
                    "order_finance_map" => [
                        'alias'=>'t4',
                        'table_name'=>self::OrderFinanceRecord,
                        'join_condition'=>"t3.uuid = t4.finance_uuid",
                        'select_build_way'=>0,
                    ],
                ],
            ],
        ];
    }

    public function listFilterRules($filter)
    {
        $rules =  [
            self::SettlingIndexScenario => [
                "fields" => [
                    "recent_settle_time_ago" => [
                        '<',
                        self::alias["default"]["distributor_executor_map"].".recent_settle_time",
                        isset($filter["recent_settle_time_ago"]) ? strtotime($filter["recent_settle_time_ago"]) : null,
                    ],
                    "recent_settle_time_start" => [
                        ">",
                        self::alias["default"]["distributor_executor_map"].".recent_settle_time",
                        isset($filter["recent_settle_time_start"]) ? strtotime($filter["recent_settle_time_start"]): null,
                    ],
                    "recent_settle_time_end" => [
                        "<",
                        self::alias["default"]["distributor_executor_map"].".recent_settle_time",
                        isset($filter["recent_settle_time_end"]) ? strtotime($filter["recent_settle_time_end"]): null,
                    ],
                    "min_wait_revenue"=>[
                        ">",
                        self::alias["default"]["distributor_executor_map"].".wait_revenue",
                        isset($filter["min_wait_revenue"]) ? $filter["min_wait_revenue"]: null,
                    ],
                    "max_wait_revenue"=>[
                        "<",
                        self::alias["default"]["distributor_executor_map"].".wait_revenue",
                        isset($filter["max_wait_revenue"]) ? $filter["max_wait_revenue"]: null,
                    ],
                    "phone" => [
                        "like",
                        self::alias["default"]["frontend_user"].".phone",
                        isset($filter["phone"]) ? $filter["phone"]: null,
                    ],
                ],
                'orderBy'=>self::OrderBy[$filter["orderBy"]],
            ],
            self::SettledIndexScenario => [
                "fields" => [
                    "settlement_start_time" => [
                        ">=",
                        self::alias["default"]["finance_record"].".create_time",
                        isset($filter["settlement_start_time"]) ? strtotime($filter["settlement_start_time"]): null,

                    ],
                    "settlement_end_time" => [
                        "<=",
                        self::alias["default"]["finance_record"].".create_time",
                        isset($filter["settlement_end_time"]) ? strtotime($filter["settlement_end_time"]): null,

                    ],
                    "min_amount" => [
                        ">=",
                        self::alias["default"]["finance_record"].".money",
                        isset($filter["min_amount"]) ? $filter["min_amount"]: null,

                    ],
                    "max_amount" => [
                        "<=",
                        self::alias["default"]["finance_record"].".money",
                        isset($filter["max_amount"]) ? $filter["max_amount"]: null,

                    ],
                    "ser_number_and_phone" => [
                        "or",
                        [
                            "like",
                            self::alias["default"]["finance_record"].".ser_number",
                            isset($filter["ser_number_and_phone"]) ? $filter["ser_number_and_phone"]: null,
                        ],
                        [
                            "like",
                            self::alias["default"]["frontend_user"].".phone",
                            isset($filter["ser_number_and_phone"]) ? $filter["ser_number_and_phone"]: null,
                        ],
                    ],
                ],
            ],
        ];
        return $rules;
    }

    public function formDataPreHandler(&$formData, $record = null)
    {
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
        if(!empty($record)){
            switch ($this->getScenario()){
                case self::CheckOrderSuccessToDis:
                    $money = isset($formData["money"]) ? $formData["money"] : 0;
                    $number_of_order = isset($formData["number_of_order"]) ? $formData["number_of_order"] : 0;
                    $formData["wait_revenue"] = $record->wait_revenue + $money;
                    $formData["wait_order_number"] = $record->wait_order_number + $number_of_order;
                    $formData["total_revenue"] = $record->total_revenue + $money;
                    $formData["total_revenue_order_number"] = $record->total_revenue_order_number + $number_of_order;
                    break;
            }

        }
    }


    public function getAllSettlingRecord()
    {
        self::$my_scenario = self::SettlingIndexScenario;
        $this->setScenario(self::SettlingIndexScenario);
        $lists = $this->recordList($this->selector,$this->defaultCondition(),false,$this->getDefaultOrderBy(true));
        $lists["list"] = $this->dealRecordLists($lists["list"]);
        return $lists;
    }

    public function getDefaultOrderBy($orderBy=null)
    {
        if(!$orderBy){
            return null;
        }
        return self::OrderBy[self::RecentSettleTimeAsc];
    }

    public function defaultCondition()
    {
        $user_uuid = Yii::$app->user->identity->uuid;
        $condition = [
            'and',
            [
                "=",
                self::alias["default"]["distributor_executor_map"].".distributor_uuid",
                $user_uuid,
            ],
            [
                ">",
                self::alias["default"]["distributor_executor_map"].".wait_revenue",
                self::WaitRevenueDefaultValue,
            ],

        ];

        return $condition;
    }

    public function dealRecordLists($lists)
    {
        if(empty($lists)){
            return $lists;
        }
        foreach ($lists as $key => $list){
            $lists[$key] = $this->dealRecordList($list);
        }

        return $lists;
    }

    public function dealRecordList($list)
    {
        if(empty($list)){
            return $list;
        }

        foreach ($list as $key => $value) {
            switch ($key){
                case "recent_settle_time":
                case "create_time":
                    $list[$key] = date("Y.m.d H:i",$value);
                    break;
            }
        }
        return $list;
    }

    public function getSettlingListFilter($filter)
    {
        if(!isset($filter["orderBy"]) || empty($filter["orderBy"])){
            $filter["orderBy"] = self::RecentSettleTimeAsc;
        }

        $this->setScenario(self::SettlingIndexScenario);

        $settling_lists = $this->listFilter($this->selector,$filter,$this->defaultCondition());
        $settling_lists["list"] = $this->dealRecordLists($settling_lists["list"]);
        return $settling_lists;
    }


    public function CheckOrderSuccessToDisUpdate($formData)
    {
        $this->setScenario(self::CheckOrderSuccessToDis);
        return $this->updateRecord($formData);
    }

    public function getAllSettledRecord()
    {
        $this->setScenario(self::SettledIndexScenario);
        $records = $this->recordList($this->settled_selector,$this->settledDefaultCondition());
        $records["list"] = $this->dealRecordLists($records["list"]);
        return $records;
    }

    public function settledDefaultCondition()
    {
        return [
            "and",
            [
                "=",
                self::alias["default"]["distributor_executor_map"].".distributor_uuid",
                Yii::$app->user->identity->uuid,
            ],
            self::alias["default"]["finance_record"].".ser_number is not null",

        ];
    }

    public function getSettledListFilter($filter)
    {
        $this->setScenario(self::SettledIndexScenario);
        if(!isset($filter["orderBy"]) || empty($filter["orderBy"])){
            $filter["orderBy"] = self::CreateTimeDesc;
        }
        $record_lists = $this->listFilter($this->settled_selector,$filter,$this->settledDefaultCondition());
        $record_lists["list"] = $this->dealRecordLists($record_lists["list"]);

        return $record_lists;

    }

}